start = min_time,
min  = min_time,
max  = max_time,
format = "dd/mm/yy",
separator = " - ",
language='pt-BR')
})
output$timedate_comp <- renderUI({
stock_name <- input$stock_comp
df <- master_df %>%
filter(Index %in% stock_name)
maxmin_time <- df %>%
group_by(Index) %>%
summarise(MD = min(Date)) %>%
.$MD %>%
max()
minmax_time <- df %>%
group_by(Index) %>%
summarise(MD = max(Date)) %>%
.$MD %>%
min()
min_time <- maxmin_time
max_time <- minmax_time
dateRangeInput("true_date_comp", "PerÃ­odo de anÃ¡lise",
end = max_time,
start = min_time,
min    = min_time,
max    = max_time,
format = "dd/mm/yy",
separator = " - ",
language='pt-BR')
})
################ OUTPUT #####################
Info_DataTable <- eventReactive(input$go,{
df <- select_stock()
mean <- df %>% select(Close) %>% colMeans()
Media <- mean[[1]]
Stock <- input$stock
df_tb <-  data.frame(Stock, Media)
df_tb <- as.data.frame(t(df_tb))
# tb  <- as_tibble(cbind(nms = names(df_tb), t(df_tb)))
# tb <- tb %>%
#     rename('InformaÃ§Ãµes' = nms,
#            'Valores' = V2)
#
return(df_tb)
})
output$info <- renderDT({#passa a media com o nome info para UI
Info_DataTable() %>%
as.data.frame() %>%
DT::datatable(options=list(
language=list(
url = '//cdn.datatables.net/plug-ins/1.10.11/i18n/Portuguese-Brasil.json'
)
))
})
output$sh <- renderPlot({
# All the inputs
df <- select_stock()
aux <- df$Close %>% na.omit() %>% as.numeric()
aux1 <- min(aux)
aux2 <- max(aux)
df$Date <- ymd(df$Date)
a <- df %>%
ggplot(aes(Date, Close, group=1)) +
geom_path() +
ylab('PreÃ§o da AÃ§Ã£o em $') +
coord_cartesian(ylim = c(aux1, aux2)) +
theme_bw() +
scale_x_date(date_labels = "%Y-%m-%d")
a
})
output$Boxplot <- renderPlot({
df <- select_stock()
b <- boxplot(df$Close,main='Boxplot')
b
})
}
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
View(master_df)
View(server)
wiew(master_df)
view
view(master_df)
view(master_df)
summary(master_df)
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
master_df[2]
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
shiny::runApp('C:/Users/inho/Desktop/Projeto 2 Estatistica(fer)')
runApp('C:/Users/inho/Desktop/Projeto 2 Estatistica(fer)')
shiny::runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
shinyApp(
ui = ui,
server = server
)
source('global.R')
source('ui.R')
source('server.R')
shinyApp(
ui = ui,
server = server
)
getwd()
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
source('global.R')
source('ui.R')
source('server.R')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
shiny::runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
runApp('Estatistica e probabilidade/projeto2/shiny-project-master/shiny-project')
shiny::runApp('Estatistica e probabilidade/shiny-project')
runApp('Estatistica e probabilidade/shiny-project')
source('global.R')
source('ui.R')
source('server.R')
shinyApp(
ui = ui,
server = server
)
getwd()
runApp('Estatistica e probabilidade/shiny-project')
source('global.R')
source('ui.R')
source('server.R')
shinyApp(
ui = ui,
server = server
)
setwd('C:/Users/inho/Documents/Estatistica e probabilidade/shiny-project')
source('global.R')
source('ui.R')
source('server.R')
shinyApp(
ui = ui,
server = server
)
runApp()
setwd('C:/Users/inho/Documents/Estatistica e probabilidade/shiny-project')
source('global.R')
source('ui.R')
source('server.R')
shinyApp(
ui = ui,
server = server
)
runApp()
setwd('C:/Users/inho/Documents/Estatistica e probabilidade/shiny-project')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_stock <- master_df %>% select(stock_name)
df_stock <- master_df %>% select(meantemp)
view(df_stock)
runApp()
minimo<-min(df_stock)
maximo<-max(df_stock)
minimo<-min(df_stock)
maximo<-max(df_stock)
df_tb<-data.frame(maximo,minimo)#quando coloca a media da erro
df_tb<-as.data.frame(df_tb)
return(df_tb)
runApp()
df <- select_stock()
variavel<- as.numeric(df_stock)
minimo<-min(variavel)
maximo<-max(variavel)
view(df_tb)
runApp()
variavel<- as.numeric(df_stock)
minimo<-min(variavel)
maximo<-max(variavel)
df_tb<-data.frame(maximo,minimo)#quando coloca a media da erro
#df_tb<-as.data.frame(df_tb)
return(df_tb)
view(maximo)
as.numeric(df_stock)
view(media)
runApp()
view(media)
mean <- df %>% select(meantemp) %>% colMeans()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(master_df)
class(date)
class(meantemp)
class(meantemp)
#df <- select(master_df,stock_name)
dataInicial<-as.numeric(master_df %>% select(date))
class(master_df %>% select(date))
class(master_df)
class(as.factor(master_df %>% select(date)))
dataCharacter<-as.character(master_df %>% select(date))
class(dataCharacter)
dataFactor<-as.factor(master_df %>% select(date))
dataInt<-as.integer(master_df %>% select(date))
dataCharacter<-as.character(master_df %>% select(date))
class(dataCharacter)
dataInterger<-as.numeric(dataCharacter)
dataCharacter<-as.character(master_df %>% select(date))
class(dataCharacter)
min_time <- min(dataCharacter)
view(min_time)
class(date)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?stock_name
?stock_name
?c
runApp()
df_stock <- master_df %>% select(stock_name)
stock_name<-humidity
################### INPUT ####################
select_stock <- eventReactive(input$go, {
stock_name <- input$
twin <- input$true_date
df_stock <- master_df %>% select(stock_name)
#df_stock <- master_df %>% filter(Index == stock_name)
## FALTA -> FILTRAR O DF POR DATA!!
return(df_stock)
})
stock_name<-meantemp
stock_name<-master_df$meantemp
view(stock_name)
runApp()
runApp()
dataCharacter<-master_df$date
class(dataCharacter)
dataCharacter<-master_df$date
view(dataCharacter)
min_time <- min(dataCharacter)
view(min_time)
max_time <- max(dataCharacter)
view(max_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dataCharacter<-master_df$date
min_time <- min(dataCharacter)
view(min_time)
dataCharacter<-master_df$date
max_time <- max(dataCharacter)
view(max_time)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(meantemp)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
df_stock <- master_df %>% select(input$stock)
stock_name <- input$stock
runApp()
runApp()
df <- select_stock()
mediana<-median(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(df)
as.numeric(df)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
class(df)
class(df)
class(variavel)
variavel<-meantemp
Info_DataTable <- eventReactive(input$go,{
df <- select_stock()
variavel<-input$stock
desvio<- sd(master_df$variavel)
minimo<-min(df)
maximo<-max(df)
#ttM<-df %>% na.omit() %>% as.numeric()
#mediana<-median(ttm)
mean <- df %>% select(input$stock) %>% colMeans()
Media <- mean[[1]]
Stock <- input$stock
df_tb <-  data.frame(Stock,Media,minimo,maximo,desvio)
df_tb <- as.data.frame(t(df_tb))
# tb  <- as_tibble(cbind(nms = names(df_tb), t(df_tb)))
# tb <- tb %>%
#     rename('Informacoes' = nms,
#            'Valores' = V2)
#
return(df_tb)
})
df <- select_stock()
variavel<-input$stock
desvio<- sd(master_df$variavel)
minimo<-min(df)
################### INPUT ####################
select_stock <- eventReactive(input$go, {
stock_name <- input$stock
twin <- input$true_date
df_stock <- master_df %>% select(input$stock)
#df_stock<-df_stock %>% filter (date >= input$dateRange[1] & date <= input$dateRange[2])
#df_stock <- master_df %>% filter(Index == stock_name)
## FALTA -> FILTRAR O DF POR DATA!!
return(df_stock)
})
output$timedate <- renderUI({
#stock_name <- input$stock
#dataFactor<-as.factor(master_df %>% select(date))
#dataCharacter<-as.character(master_df %>% select(date))
#dataInterger<-as.numeric(dataCharacter)
#dataInt<-as.integer(master_df %>% select(date))
dataCharacter<-master_df$date
#df <- select(master_df,stock_name)
#dataInicial<-as.numeric(master_df %>% select(date))
min_time <- min(dataCharacter)
max_time <- max(dataCharacter)
dateRangeInput("true_date", "Periodo de analise",
end = max_time,
start = min_time,
min  = min_time,
max  = max_time,
format = "dd/mm/yy",
separator = " - ",
language='pt-BR')
})
runApp()
runApp()
teste1<- as.factor(df)
runApp()
runApp()
df <- select_stock()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
view(maximo)
view(mediana)
view(variavel)
view(mean)
view(media)
view(media)
view(stock)
view(desvio)
view(desvio)
runApp()
view(df)
view(desvio)
runApp()
runApp()
runApp()
runApp()
view(auxdev)
Q
runApp()
view(auxdev)
Q
Q
Q
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
view(auxdev)
Q
Q
Q
runApp()
runApp()
Q
Q
runApp()
view(desvio)
str(df)
str(df)
Q
Q
runApp()
view(df)
view(variavel)
view(variavel)
view(variavel)
Q
Q
runApp()
view(variavel)
view(variavel1)
view(variavel1)
Q
runApp()
view(variavel)
view(variavel1)
Q
runApp()
view(variavel1)
view(desvio)
Q
Q
runApp()
view(variavel1)
Q
view(df)
